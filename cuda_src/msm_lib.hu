#include <inttypes.h>
#include <stdio.h>

#ifdef __CUDA_ARCH__
#define __const__  __constant__ const
#else
#define __const__ const
#endif


//// 1. UINT-384 Arithmetic ////

uint64_t random64();
void random384(uint64_t res[6]);
void print(uint64_t a[6]);

__host__ __device__ bool is_zero(uint64_t a[6]);
__host__ __device__ bool eq(uint64_t a[6], uint64_t b[6]);
__host__ __device__ bool geq(uint64_t a[6], uint64_t b[6]);

__host__ __device__ uint64_t leading_zeros(uint64_t a[6]);

__host__ __device__ void copy(uint64_t res[6], uint64_t a[6]);

__host__ __device__ void rshift(uint64_t res[6], uint64_t a[6]);
__host__ __device__ void lshift(uint64_t res[6], uint64_t a[6]);
__host__ __device__ bool add(uint64_t res[6], uint64_t a[6], uint64_t b[6]);
__host__ __device__ bool sub(uint64_t res[6], uint64_t a[6], uint64_t b[6]);


//// 2. 377bit Field Arithmethic ////

void random_mod(uint64_t res[6]);

__host__ __device__ void add_mod(uint64_t res[6], uint64_t a[6], uint64_t b[6]);
__host__ __device__ void double_mod(uint64_t res[6], uint64_t a[6]);
__host__ __device__ void sub_mod(uint64_t res[6], uint64_t a[6], uint64_t b[6]);
__host__ __device__ void neg_mod(uint64_t res[6], uint64_t a[6]);
__host__ __device__ void mult_mod(uint64_t res[6], uint64_t a[6], uint64_t b[6]);
__host__ __device__ void inverse_mod(uint64_t res[6], uint64_t a[6]);

__host__ __device__ void to_mon(uint64_t res[6], uint64_t a[6]);
__host__ __device__ void from_mon(uint64_t res[6], uint64_t a[6]);

__host__ __device__ void mult_mon(uint64_t res[6], uint64_t a[6], uint64_t b[6]);
__host__ __device__ void inverse_mon(uint64_t res[6], uint64_t a[6]);


//// 3. Elliptic Curve Points Arithmetic ////

void print_p(uint64_t p[12]);
void random_p(uint64_t res[12]);

__host__ __device__ bool is_zero_p(uint64_t p[12]);
__host__ __device__ bool is_p(uint64_t p[12]);
__host__ __device__ bool eq_p(uint64_t p[12], uint64_t q[12]);

__host__ __device__ void copy_p(uint64_t res[12], uint64_t p[12]);
__host__ __device__ void copy_G1(uint64_t res[12]);

__host__ __device__ void double_p(uint64_t res[12], uint64_t p[12]);
__host__ __device__ void add_p(uint64_t res[12], uint64_t p[12], uint64_t q[12]);
__host__ __device__ void neg_p(uint64_t res[12], uint64_t p[12]);
__host__ __device__ void scalar_p(uint64_t res[12], uint64_t p[12], uint64_t k[6]);
__host__ __device__ void scalar_p(uint64_t res[12], uint64_t p[12], uint64_t k);

__host__ __device__ void to_mon_p(uint64_t register_t[12], uint64_t p[12]);
__host__ __device__ void from_mon_p(uint64_t res[12], uint64_t p[12]);

__host__ __device__ void double_mon_p(uint64_t res[12], uint64_t p[12]);
__host__ __device__ void add_mon_p(uint64_t res[12], uint64_t p[12], uint64_t q[12]);
__host__ __device__ void scalar_mon_p(uint64_t res[12], uint64_t p[12], uint64_t k[6]);


//// 4. MSM Algorithms ////

void trivial_msm(uint64_t res[12], uint64_t *p, uint64_t *k, uint64_t n);

__global__ void map_to_mon(uint64_t*__restrict ress, uint64_t*__restrict ps, uint64_t n);
__global__ void map_mon_scalar(uint64_t*__restrict ress, uint64_t*__restrict ps, uint64_t*__restrict ks, uint64_t n);
__global__ void linear_mon_reduce(uint64_t*__restrict ress, uint64_t*__restrict ps, uint64_t n);
__global__ void log_mon_reduce(uint64_t*__restrict ress, uint64_t*__restrict ps, uint64_t n);

void cuda_mon_msm(uint64_t __restrict res[12], uint64_t* __restrict ps, uint64_t* __restrict ks, uint64_t n);
